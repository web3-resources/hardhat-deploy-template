/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NewTokenCollectibleInterface extends ethers.utils.Interface {
  functions: {
    "MAX_MINTS_PER_ADDRESS()": FunctionFragment;
    "TOKEN_LIMIT()": FunctionFragment;
    "_canClaim()": FunctionFragment;
    "_feeAddress()": FunctionFragment;
    "_price()": FunctionFragment;
    "_tokenEach()": FunctionFragment;
    "_tokenIds()": FunctionFragment;
    "addressMintAvailable(address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "claimTokens()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerMint(address)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "tokensOfOwner(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCanClaim()": FunctionFragment;
    "updateClaimToken(address)": FunctionFragment;
    "updateFeeAddress(address)": FunctionFragment;
    "updatePrice(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_MINTS_PER_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_canClaim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_feeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_tokenEach",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_tokenIds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addressMintAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "ownerMint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensOfOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCanClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateClaimToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_MINTS_PER_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_canClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_feeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_tokenEach", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_tokenIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressMintAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCanClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClaimToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class NewTokenCollectible extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NewTokenCollectibleInterface;

  functions: {
    MAX_MINTS_PER_ADDRESS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_MINTS_PER_ADDRESS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOKEN_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "TOKEN_LIMIT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _canClaim(overrides?: CallOverrides): Promise<[boolean]>;

    "_canClaim()"(overrides?: CallOverrides): Promise<[boolean]>;

    _feeAddress(overrides?: CallOverrides): Promise<[string]>;

    "_feeAddress()"(overrides?: CallOverrides): Promise<[string]>;

    _price(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_price()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _tokenEach(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_tokenEach()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _tokenIds(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    "_tokenIds()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    addressMintAvailable(
      to: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "addressMintAvailable(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    "baseURI()"(overrides?: CallOverrides): Promise<[string]>;

    claimTokens(overrides?: Overrides): Promise<ContractTransaction>;

    "claimTokens()"(overrides?: Overrides): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    ownerMint(to: string, overrides?: Overrides): Promise<ContractTransaction>;

    "ownerMint(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBaseURI(string)"(
      baseURI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokensOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "tokensOfOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateCanClaim(overrides?: Overrides): Promise<ContractTransaction>;

    "updateCanClaim()"(overrides?: Overrides): Promise<ContractTransaction>;

    updateClaimToken(
      newToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateClaimToken(address)"(
      newToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateFeeAddress(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateFeeAddress(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePrice(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePrice(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  MAX_MINTS_PER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_MINTS_PER_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

  TOKEN_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  "TOKEN_LIMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

  _canClaim(overrides?: CallOverrides): Promise<boolean>;

  "_canClaim()"(overrides?: CallOverrides): Promise<boolean>;

  _feeAddress(overrides?: CallOverrides): Promise<string>;

  "_feeAddress()"(overrides?: CallOverrides): Promise<string>;

  _price(overrides?: CallOverrides): Promise<BigNumber>;

  "_price()"(overrides?: CallOverrides): Promise<BigNumber>;

  _tokenEach(overrides?: CallOverrides): Promise<BigNumber>;

  "_tokenEach()"(overrides?: CallOverrides): Promise<BigNumber>;

  _tokenIds(overrides?: CallOverrides): Promise<BigNumber>;

  "_tokenIds()"(overrides?: CallOverrides): Promise<BigNumber>;

  addressMintAvailable(to: string, overrides?: CallOverrides): Promise<boolean>;

  "addressMintAvailable(address)"(
    to: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  "baseURI()"(overrides?: CallOverrides): Promise<string>;

  claimTokens(overrides?: Overrides): Promise<ContractTransaction>;

  "claimTokens()"(overrides?: Overrides): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  ownerMint(to: string, overrides?: Overrides): Promise<ContractTransaction>;

  "ownerMint(address)"(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBaseURI(
    baseURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBaseURI(string)"(
    baseURI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenOfOwnerByIndex(address,uint256)"(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokensOfOwner(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "tokensOfOwner(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateCanClaim(overrides?: Overrides): Promise<ContractTransaction>;

  "updateCanClaim()"(overrides?: Overrides): Promise<ContractTransaction>;

  updateClaimToken(
    newToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateClaimToken(address)"(
    newToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateFeeAddress(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateFeeAddress(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePrice(
    newPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePrice(uint256)"(
    newPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_MINTS_PER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_MINTS_PER_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "TOKEN_LIMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    _canClaim(overrides?: CallOverrides): Promise<boolean>;

    "_canClaim()"(overrides?: CallOverrides): Promise<boolean>;

    _feeAddress(overrides?: CallOverrides): Promise<string>;

    "_feeAddress()"(overrides?: CallOverrides): Promise<string>;

    _price(overrides?: CallOverrides): Promise<BigNumber>;

    "_price()"(overrides?: CallOverrides): Promise<BigNumber>;

    _tokenEach(overrides?: CallOverrides): Promise<BigNumber>;

    "_tokenEach()"(overrides?: CallOverrides): Promise<BigNumber>;

    _tokenIds(overrides?: CallOverrides): Promise<BigNumber>;

    "_tokenIds()"(overrides?: CallOverrides): Promise<BigNumber>;

    addressMintAvailable(
      to: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "addressMintAvailable(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    "baseURI()"(overrides?: CallOverrides): Promise<string>;

    claimTokens(overrides?: CallOverrides): Promise<void>;

    "claimTokens()"(overrides?: CallOverrides): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "mint(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    ownerMint(to: string, overrides?: CallOverrides): Promise<void>;

    "ownerMint(address)"(to: string, overrides?: CallOverrides): Promise<void>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(baseURI: string, overrides?: CallOverrides): Promise<void>;

    "setBaseURI(string)"(
      baseURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokensOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "tokensOfOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCanClaim(overrides?: CallOverrides): Promise<void>;

    "updateCanClaim()"(overrides?: CallOverrides): Promise<void>;

    updateClaimToken(
      newToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateClaimToken(address)"(
      newToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeAddress(addr: string, overrides?: CallOverrides): Promise<void>;

    "updateFeeAddress(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePrice(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePrice(uint256)"(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    MAX_MINTS_PER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_MINTS_PER_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "TOKEN_LIMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    _canClaim(overrides?: CallOverrides): Promise<BigNumber>;

    "_canClaim()"(overrides?: CallOverrides): Promise<BigNumber>;

    _feeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "_feeAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    _price(overrides?: CallOverrides): Promise<BigNumber>;

    "_price()"(overrides?: CallOverrides): Promise<BigNumber>;

    _tokenEach(overrides?: CallOverrides): Promise<BigNumber>;

    "_tokenEach()"(overrides?: CallOverrides): Promise<BigNumber>;

    _tokenIds(overrides?: CallOverrides): Promise<BigNumber>;

    "_tokenIds()"(overrides?: CallOverrides): Promise<BigNumber>;

    addressMintAvailable(
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addressMintAvailable(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    "baseURI()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimTokens(overrides?: Overrides): Promise<BigNumber>;

    "claimTokens()"(overrides?: Overrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "mint(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerMint(to: string, overrides?: Overrides): Promise<BigNumber>;

    "ownerMint(address)"(to: string, overrides?: Overrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBaseURI(baseURI: string, overrides?: Overrides): Promise<BigNumber>;

    "setBaseURI(string)"(
      baseURI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensOfOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateCanClaim(overrides?: Overrides): Promise<BigNumber>;

    "updateCanClaim()"(overrides?: Overrides): Promise<BigNumber>;

    updateClaimToken(
      newToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateClaimToken(address)"(
      newToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateFeeAddress(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "updateFeeAddress(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePrice(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updatePrice(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_MINTS_PER_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAX_MINTS_PER_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOKEN_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TOKEN_LIMIT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _canClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_canClaim()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _feeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_feeAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_price()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _tokenEach(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_tokenEach()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _tokenIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_tokenIds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressMintAvailable(
      to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addressMintAvailable(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseURI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimTokens(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claimTokens()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerMint(to: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "ownerMint(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBaseURI(string)"(
      baseURI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensOfOwner(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensOfOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateCanClaim(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateCanClaim()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    updateClaimToken(
      newToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateClaimToken(address)"(
      newToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateFeeAddress(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateFeeAddress(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePrice(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePrice(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
